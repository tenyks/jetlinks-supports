package org.jetlinks.supports.protocol.codec.defaults;


import io.netty.buffer.ByteBufUtil;
import lombok.AllArgsConstructor;
import org.jetlinks.supports.protocol.codec.BinaryCodec;



@AllArgsConstructor(staticName = "of")
public class HexStringCodec implements BinaryCodec<String> {

    private final int offset;
    private final int length;

    @Override
    public String decode(byte[] payload, int offset) {
        offset = this.offset + offset;

        int readableLength = payload.length - offset;

        if (length != -1) {
            readableLength = Math.min(length, readableLength);
        }

        return ByteBufUtil.hexDump(payload, this.offset + offset, readableLength);
    }

    @Override
    public void encode(String part, byte[] payload, int offset) {

        byte[] data = ByteBufUtil.decodeHexDump(part);

        System.arraycopy(data, 0, payload, this.offset + offset, data.length);
    }

    public static void main(String[] args) {
        int[] buf = new int[] {
                123,34,99,
                111,100,101,34,58,34,83,85,67,67,69,83,83,34,44,34,109,101,115,115,97,103,101,84,121,112,101,34,58,34,68,69,86,73,67,69,95,65,85,84,72,95,82,69,83,80,79,78,83,69,34,44,34,115,117,99,99,101,115,115,34,58,116,114,117,101,44,34,109,101,115,115,97,103,101,73,100,34,58,34,54,98,57,54,103,54,103,55,97,52,51,111,56,54,113,112,120,105,103,107,100,51,101,118,34,44,34,109,101,115,115,97,103,101,34,58,34,230,136,144,229,138,159,34,
                44,34,118,101,114,115,105,111,110,34,58,34,86,49,46,49,34,44,34,100,101,118,105,99,101,73,110,102,111,34,58,123,34,97,112,105,75,101,121,34,58,34,97,101,57,102,98,97,57,101,53,98,57,53,52,52,97,55,56,98,101,57,97
                ,48,97,50,98,100,52,102,50,54,98,99,34,44,34,97,112,105,83,101,114,118,101,114,73,110,102,111,34,58,123,34,97,112,112,75,101,121,34,58,34,105,97,112,65,100,109,105,110,34,44,34,97,112,112,83,101,99,114,101,116,34
                ,58,34,101,99,49,101,101,102,50,99,101,53,55,50,52,53,97,99,56,49,54,99,53,57,52,51,49,51,56,48,53,97,56,97,34,44,34,117,114,108,34,58,34,104,116,116,112,58,47,47,49,52,46,49,56,46,54,48,46,53,56,58,49,57,48,48,48,34,125,44,34,100,101,118,105,99,101,73,100,101,110,116,105,116,121,34,58,34,49,56,53,51,50,55,48,55,49,52,55,50,49,48,53,48,55,49,53,34,44,34,100,101,118,105,99,101,73,110,102,111,73,100,34,58,49,56,53,51,50,55
                ,48,55,49,52,55,50,49,48,53,48,55,49,53,44,34,100,101,118,105,99,101,83,110,34,58,34,49,56,52,56,55,49,52,56,50,52,48,48,50,54,57,34,44,34,112,114,111,100,117,99,116,73,100,101,110,116,105,116,121,34,58,34,49,48,
                48,48,48,48,49,48,50,34,44,34,112,114,111,100,117,99,116,73,110,102,111,73,100,34,58,49,55,56,51,48,49,52,50,53,50,54,50,57,50,54,54,52,54,56,125,44,34,116,105,109,101,115,116,97,109,112,34,58,49,55,51,48,56,48,55,53,54,56,57,53,55,125
        };

        byte[] buf2 = new byte[buf.length];
        for (int i = 0; i < buf.length; i++) {
            buf2[i] = (byte) buf[i];
        }

        System.out.println(new String(buf2));
    }
}
